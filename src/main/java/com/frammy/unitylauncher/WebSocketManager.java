package com.frammy.unitylauncher;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import java.util.logging.Logger;

import org.bukkit.entity.Player;
import org.bukkit.entity.PolarBear;
import org.java_websocket.client.WebSocketClient;
import org.java_websocket.handshake.ServerHandshake;

public class WebSocketManager {
    private final Logger logger;
    private final Map<String, WebSocketClient> clients = new ConcurrentHashMap<>();

    public WebSocketManager(Logger logger) {
        this.logger = logger;
    }
    public Set<String> getConnectedPlayers() {
        return clients.keySet();
    }
    public void tryForceConnect(Player player) {
        connectPlayer(player.getName());
        player.sendMessage("¬ß7–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è..");
    }
    // üîπ –ü–æ–¥–∫–ª—é—á–∞–µ–º –∏–≥—Ä–æ–∫–∞ –ø–æ –µ–≥–æ –Ω–∏–∫–Ω–µ–π–º—É
    public void connectPlayer(String playerName) {
        if (clients.containsKey(playerName)) {
            logger.warning("‚ö†Ô∏è –ò–≥—Ä–æ–∫ " + playerName + " —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω.");
            return;
        }

        try {
            WebSocketClient client = new WebSocketClient(new URI("ws://localhost:1337/link")) {
                @Override
                public void onOpen(ServerHandshake handshakedata) {
                    logger.info("‚úÖ " + playerName + " –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ WebSocket.");
                    clients.put(playerName, this); // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¢–û–õ–¨–ö–û –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                }

                @Override
                public void onMessage(String message) {
                    logger.info("üì© [" + playerName + "] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ª–∞—É–Ω—á–µ—Ä–∞: " + message);
                }

                @Override
                public void onClose(int code, String reason, boolean remote) {
                    logger.warning("‚ö†Ô∏è [" + playerName + "] –û—Ç–∫–ª—é—á–µ–Ω –æ—Ç WebSocket: " + reason);
                    clients.remove(playerName);
                }

                @Override
                public void onError(Exception ex) {
                    logger.severe("‚ùå [" + playerName + "] –û—à–∏–±–∫–∞ WebSocket: " + ex.getMessage());
                }
            };

            client.connect();
        } catch (URISyntaxException e) {
            logger.severe("‚ùå –û—à–∏–±–∫–∞ URL WebSocket –¥–ª—è " + playerName + ": " + e.getMessage());
        }
    }

    // üîπ –û—Ç–∫–ª—é—á–∞–µ–º –∏–≥—Ä–æ–∫–∞
    public void disconnectPlayer(String playerName) {
        WebSocketClient client = clients.remove(playerName);
        if (client != null) {
            client.close();
            logger.info("‚ùå " + playerName + " –æ—Ç–∫–ª—é—á–∏–ª—Å—è –æ—Ç WebSocket.");
        } else {
            logger.warning("‚ö†Ô∏è –ò–≥—Ä–æ–∫ " + playerName + " –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö.");
        }
    }

    // üîπ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É –∏–≥—Ä–æ–∫—É
    public void sendMessageToPlayer(String playerName, String message) {
        WebSocketClient client = clients.get(playerName);
        if (client != null && client.isOpen()) {
            client.send(message);
            logger.info("üì§ [" + playerName + "] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: " + message);
        } else {
            logger.warning("‚ö†Ô∏è –ò–≥—Ä–æ–∫ " + playerName + " –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω.");
        }
    }

    // üîπ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º
    public void broadcastMessage(String message) {
        for (Map.Entry<String, WebSocketClient> entry : clients.entrySet()) {
            WebSocketClient client = entry.getValue();
            if (client.isOpen()) {
                client.send(message);
                logger.info("üì§ [" + entry.getKey() + "] –ü–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: " + message);
            }
        }
    }

    // üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ –∏–≥—Ä–æ–∫
    public boolean isPlayerConnected(String playerName) {
        WebSocketClient client = clients.get(playerName);
        boolean isConnected = client != null && client.isOpen();
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: " + playerName + " -> " + isConnected);
        return isConnected;
    }

    // üîπ –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–µ—Ä–≤–µ—Ä–∞)
    public void disconnectAll() {
        for (String player : clients.keySet()) {
            disconnectPlayer(player);
        }
        clients.clear();
    }
}